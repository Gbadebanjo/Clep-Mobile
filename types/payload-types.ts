/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
    | 'Pacific/Midway'
    | 'Pacific/Niue'
    | 'Pacific/Honolulu'
    | 'Pacific/Rarotonga'
    | 'America/Anchorage'
    | 'Pacific/Gambier'
    | 'America/Los_Angeles'
    | 'America/Tijuana'
    | 'America/Denver'
    | 'America/Phoenix'
    | 'America/Chicago'
    | 'America/Guatemala'
    | 'America/New_York'
    | 'America/Bogota'
    | 'America/Caracas'
    | 'America/Santiago'
    | 'America/Buenos_Aires'
    | 'America/Sao_Paulo'
    | 'Atlantic/South_Georgia'
    | 'Atlantic/Azores'
    | 'Atlantic/Cape_Verde'
    | 'Europe/London'
    | 'Europe/Berlin'
    | 'Africa/Lagos'
    | 'Europe/Athens'
    | 'Africa/Cairo'
    | 'Europe/Moscow'
    | 'Asia/Riyadh'
    | 'Asia/Dubai'
    | 'Asia/Baku'
    | 'Asia/Karachi'
    | 'Asia/Tashkent'
    | 'Asia/Calcutta'
    | 'Asia/Dhaka'
    | 'Asia/Almaty'
    | 'Asia/Jakarta'
    | 'Asia/Bangkok'
    | 'Asia/Shanghai'
    | 'Asia/Singapore'
    | 'Asia/Tokyo'
    | 'Asia/Seoul'
    | 'Australia/Sydney'
    | 'Pacific/Guam'
    | 'Pacific/Noumea'
    | 'Pacific/Auckland'
    | 'Pacific/Fiji';

export interface Config {
    auth: {
        users: UserAuthOperations;
    };
    blocks: {};
    collections: {
        'activity-logs': ActivityLog;
        users: User;
        media: Media;
        vendors: Vendor;
        bargains: Bargain;
        chats: Chat;
        'chat-messages': ChatMessage;
        stores: Store;
        customers: Customer;
        notifications: Notification;
        orders: Order;
        plans: Plan;
        products: Product;
        'vendor-follows': VendorFollow;
        reviews: Review;
        'store-categories': StoreCategory;
        categories: Category;
        'subscription-history': SubscriptionHistory;
        promotions: Promotion;
        heroes: Hero;
        disputes: Dispute;
        carts: Cart;
        'account-settings': AccountSetting;
        return_policies: ReturnPolicy;
        advertisements: Advertisement;
        recommendations: Recommendation;
        'flash-sales': FlashSale;
        escrow: Escrow;
        order_trackings: OrderTracking;
        'black-friday-deals': BlackFridayDeal;
        'wallet-transactions': WalletTransaction;
        'newsletter-subscriptions': NewsletterSubscription;
        subscriptions: Subscription;
        'saved-items': SavedItem;
        transfers: Transfer;
        transactions: Transaction;
        waitlist: Waitlist;
        automations: Automation;
        conditions: Condition;
        actions: Action;
        measurements: Measurement;
        'store-adverts': StoreAdvert;
        'store-advert-metrics': StoreAdvertMetric;
        'shared-measurements': SharedMeasurement;
        kyc: Kyc;
        'payload-locked-documents': PayloadLockedDocument;
        'payload-preferences': PayloadPreference;
        'payload-migrations': PayloadMigration;
    };
    collectionsJoins: {};
    collectionsSelect: {
        'activity-logs': ActivityLogsSelect<false> | ActivityLogsSelect<true>;
        users: UsersSelect<false> | UsersSelect<true>;
        media: MediaSelect<false> | MediaSelect<true>;
        vendors: VendorsSelect<false> | VendorsSelect<true>;
        bargains: BargainsSelect<false> | BargainsSelect<true>;
        chats: ChatsSelect<false> | ChatsSelect<true>;
        'chat-messages': ChatMessagesSelect<false> | ChatMessagesSelect<true>;
        stores: StoresSelect<false> | StoresSelect<true>;
        customers: CustomersSelect<false> | CustomersSelect<true>;
        notifications: NotificationsSelect<false> | NotificationsSelect<true>;
        orders: OrdersSelect<false> | OrdersSelect<true>;
        plans: PlansSelect<false> | PlansSelect<true>;
        products: ProductsSelect<false> | ProductsSelect<true>;
        'vendor-follows':
            | VendorFollowsSelect<false>
            | VendorFollowsSelect<true>;
        reviews: ReviewsSelect<false> | ReviewsSelect<true>;
        'store-categories':
            | StoreCategoriesSelect<false>
            | StoreCategoriesSelect<true>;
        categories: CategoriesSelect<false> | CategoriesSelect<true>;
        'subscription-history':
            | SubscriptionHistorySelect<false>
            | SubscriptionHistorySelect<true>;
        promotions: PromotionsSelect<false> | PromotionsSelect<true>;
        heroes: HeroesSelect<false> | HeroesSelect<true>;
        disputes: DisputesSelect<false> | DisputesSelect<true>;
        carts: CartsSelect<false> | CartsSelect<true>;
        'account-settings':
            | AccountSettingsSelect<false>
            | AccountSettingsSelect<true>;
        return_policies:
            | ReturnPoliciesSelect<false>
            | ReturnPoliciesSelect<true>;
        advertisements:
            | AdvertisementsSelect<false>
            | AdvertisementsSelect<true>;
        recommendations:
            | RecommendationsSelect<false>
            | RecommendationsSelect<true>;
        'flash-sales': FlashSalesSelect<false> | FlashSalesSelect<true>;
        escrow: EscrowSelect<false> | EscrowSelect<true>;
        order_trackings:
            | OrderTrackingsSelect<false>
            | OrderTrackingsSelect<true>;
        'black-friday-deals':
            | BlackFridayDealsSelect<false>
            | BlackFridayDealsSelect<true>;
        'wallet-transactions':
            | WalletTransactionsSelect<false>
            | WalletTransactionsSelect<true>;
        'newsletter-subscriptions':
            | NewsletterSubscriptionsSelect<false>
            | NewsletterSubscriptionsSelect<true>;
        subscriptions: SubscriptionsSelect<false> | SubscriptionsSelect<true>;
        'saved-items': SavedItemsSelect<false> | SavedItemsSelect<true>;
        transfers: TransfersSelect<false> | TransfersSelect<true>;
        transactions: TransactionsSelect<false> | TransactionsSelect<true>;
        waitlist: WaitlistSelect<false> | WaitlistSelect<true>;
        automations: AutomationsSelect<false> | AutomationsSelect<true>;
        conditions: ConditionsSelect<false> | ConditionsSelect<true>;
        actions: ActionsSelect<false> | ActionsSelect<true>;
        measurements: MeasurementsSelect<false> | MeasurementsSelect<true>;
        'store-adverts': StoreAdvertsSelect<false> | StoreAdvertsSelect<true>;
        'store-advert-metrics':
            | StoreAdvertMetricsSelect<false>
            | StoreAdvertMetricsSelect<true>;
        'shared-measurements':
            | SharedMeasurementsSelect<false>
            | SharedMeasurementsSelect<true>;
        kyc: KycSelect<false> | KycSelect<true>;
        'payload-locked-documents':
            | PayloadLockedDocumentsSelect<false>
            | PayloadLockedDocumentsSelect<true>;
        'payload-preferences':
            | PayloadPreferencesSelect<false>
            | PayloadPreferencesSelect<true>;
        'payload-migrations':
            | PayloadMigrationsSelect<false>
            | PayloadMigrationsSelect<true>;
    };
    db: {
        defaultIDType: string;
    };
    globals: {};
    globalsSelect: {};
    locale: null;
    user: User & {
        collection: 'users';
    };
    jobs: {
        tasks: unknown;
        workflows: unknown;
    };
}
export interface UserAuthOperations {
    forgotPassword: {
        email: string;
        password: string;
    };
    login: {
        email: string;
        password: string;
    };
    registerFirstUser: {
        email: string;
        password: string;
    };
    unlock: {
        email: string;
        password: string;
    };
}
/**
 * System-wide activity and audit logs
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activity-logs".
 */
export interface ActivityLog {
    id: string;
    /**
     * Type of activity being logged
     */
    action:
        | 'login'
        | 'login_failed'
        | 'logout'
        | 'user_created'
        | 'user_updated'
        | 'user_deleted'
        | 'status_change'
        | 'role_change'
        | 'field_update'
        | 'password_reset'
        | 'verification_email_sent'
        | 'email_verified'
        | 'password_reset_requested'
        | 'password_reset_completed'
        | 'verification'
        | 'account_locked'
        | 'account_unlocked'
        | 'vendor_approved'
        | 'vendor_rejected'
        | 'vendor_suspended'
        | 'vendor_profile_created'
        | 'support_ticket_created'
        | 'refund_processed'
        | 'escrow_released'
        | 'settings_updated'
        | 'store_created'
        | 'verification_step_changed'
        | 'nin_verified'
        | 'nin_verification_failed'
        | 'account_verified'
        | 'bank_details_updated'
        | 'bank_account_verified'
        | 'subaccount_created'
        | 'subaccount_status_changed'
        | 'vendor_deleted'
        | 'wallet_withdrawn'
        | 'plan_created'
        | 'plan_price_changed'
        | 'plan_features_changed'
        | 'subscription_created'
        | 'subscription_status_changed'
        | 'flutterwave_plans_updated'
        | 'flutterwave_plans_created'
        | 'subscription_updated'
        | 'subscription_canceled'
        | 'subscription_payment_confirmed'
        | 'payment_succeeded'
        | 'payment_failed'
        | 'account_verification_failed'
        | 'product_created'
        | 'product_stock_changed'
        | 'order_created'
        | 'order_status_changed'
        | 'payment_status_changed'
        | 'order_delivery_status_changed'
        | 'delivery_order_created'
        | 'review_created'
        | 'review_replied'
        | 'inventory_update'
        | 'cac_verified'
        | 'cac_verification_failed'
        | 'verification_tier_changed'
        | 'store_visibility_changed';
    /**
     * Outcome of the action
     */
    status: 'success' | 'failure' | 'pending';
    /**
     * User who performed the action
     */
    performedBy?: (string | null) | User;
    /**
     * Collection name related to this activity
     */
    entityCollection?: string | null;
    /**
     * ID of the related document
     */
    entityId?: string | null;
    /**
     * Fields that were modified in this action
     */
    fields?:
        | {
              fieldName: string;
              id?: string | null;
          }[]
        | null;
    /**
     * Detailed description of the activity
     */
    message?: string | null;
    /**
     * IP address of the request
     */
    ip?: string | null;
    /**
     * Browser/client information
     */
    userAgent?: string | null;
    /**
     * Additional contextual data
     */
    metadata?: string | null;
    /**
     * Previous value before the change
     */
    oldValue?: string | null;
    /**
     * New value after the change
     */
    newValue?: string | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
    id: string;
    role: 'admin' | 'vendor' | 'customer' | 'staff';
    /**
     * User's full name
     */
    name: string;
    /**
     * Business name (if applicable)
     */
    businessName?: string | null;
    /**
     * Contact number for verification and communication
     */
    phoneNumber: string;
    /**
     * User account status
     */
    isActive?: boolean | null;
    /**
     * Email verification status
     */
    emailVerified?: boolean | null;
    /**
     * Verification token for email validation
     */
    verification_token?: string | null;
    /**
     * Expiration date of verification token
     */
    verification_expiry?: string | null;
    /**
     * User's profile picture
     */
    profilePicture?: (string | null) | Media;
    lockedUntil?: string | null;
    /**
     * Related vendor profile (if user is a vendor)
     */
    vendorProfile?: (string | null) | Vendor;
    /**
     * Related store (if user is a vendor)
     */
    store?: (string | null) | Store;
    /**
     * Related customer profile (if user is a customer)
     */
    customerProfile?: (string | null) | Customer;
    /**
     * Last successful login timestamp
     */
    lastLogin?: string | null;
    createdAt: string;
    updatedAt: string;
    enableAPIKey?: boolean | null;
    apiKey?: string | null;
    apiKeyIndex?: string | null;
    /**
     * User's email address for login and communication
     */
    email: string;
    resetPasswordToken?: string | null;
    resetPasswordExpiration?: string | null;
    salt?: string | null;
    hash?: string | null;
    loginAttempts?: number | null;
    lockUntil?: string | null;
    password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
    id: string;
    /**
     * Alternative text for accessibility
     */
    alt?: string | null;
    uploadedBy: string | User;
    /**
     * Make this media publicly accessible
     */
    isPublic?: boolean | null;
    /**
     * Optional caption for the media
     */
    caption?: string | null;
    /**
     * Tags for organizing media
     */
    tags?:
        | {
              tag?: string | null;
              id?: string | null;
          }[]
        | null;
    fileDetails?: {
        filename?: string | null;
        filesize?: number | null;
        mimeType?: string | null;
    };
    prefix?: string | null;
    updatedAt: string;
    createdAt: string;
    url?: string | null;
    thumbnailURL?: string | null;
    filename?: string | null;
    mimeType?: string | null;
    filesize?: number | null;
    width?: number | null;
    height?: number | null;
    focalX?: number | null;
    focalY?: number | null;
    sizes?: {
        thumbnail?: {
            url?: string | null;
            width?: number | null;
            height?: number | null;
            mimeType?: string | null;
            filesize?: number | null;
            filename?: string | null;
        };
        card?: {
            url?: string | null;
            width?: number | null;
            height?: number | null;
            mimeType?: string | null;
            filesize?: number | null;
            filename?: string | null;
        };
        tablet?: {
            url?: string | null;
            width?: number | null;
            height?: number | null;
            mimeType?: string | null;
            filesize?: number | null;
            filename?: string | null;
        };
        extraLarge?: {
            url?: string | null;
            width?: number | null;
            height?: number | null;
            mimeType?: string | null;
            filesize?: number | null;
            filename?: string | null;
        };
    };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "vendors".
 */
export interface Vendor {
    id: string;
    user: string | User;
    verificationStatus: 'pending' | 'in_progress' | 'verified' | 'rejected';
    /**
     * Verification tier determines account capabilities and bank account requirements
     */
    verificationTier: 'unverified' | 'tier1' | 'tier2';
    ninVerification?: {
        ninNumber?: string | null;
        verifiedAt?: string | null;
        verificationId?: string | null;
        verifiedData?: {
            firstName?: string | null;
            middleName?: string | null;
            lastName?: string | null;
            dateOfBirth?: string | null;
            phoneNumber?: string | null;
        };
    };
    cacVerification?: {
        cacNumber?: string | null;
        verifiedAt?: string | null;
        verificationId?: string | null;
        companyName?: string | null;
        companyType?:
            | (
                  | 'business_name'
                  | 'limited_company'
                  | 'non_profit'
                  | 'partnership'
                  | 'other'
              )
            | null;
        registrationDate?: string | null;
        directors?:
            | {
                  name: string;
                  position?: string | null;
                  id?: string | null;
              }[]
            | null;
    };
    businessDetails?: {
        businessName?: string | null;
        businessEmail?: string | null;
        businessPhone?: string | null;
        address?: {
            street?: string | null;
            city?: string | null;
            state?: string | null;
            country?: string | null;
            postalCode?: string | null;
        };
    };
    bankDetails?: {
        bankCode?: string | null;
        accountNumber?: string | null;
        /**
         * Paystack transfer recipient code
         */
        recipientCode?: string | null;
        accountName?: string | null;
    };
    /**
     * Commission percentage taken on sales (1-50%)
     */
    commissionRate?: number | null;
    wallet: {
        walletId: string;
        balances: {
            total: number;
            escrow: number;
            available: number;
        };
        withdrawalSettings: {
            minimumWithdrawal: number;
            autoWithdrawal: boolean;
            autoWithdrawalThreshold?: number | null;
        };
        status: 'active' | 'suspended' | 'closed';
    };
    /**
     * Stores associated with the vendor
     */
    store?: (string | Store)[] | null;
    createdAt: string;
    updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "stores".
 */
export interface Store {
    id: string;
    /**
     * Unique identifier for store URL (e.g., ST123)
     */
    storeNumber: string;
    /**
     * Name of the store
     */
    storeName: string;
    /**
     * Vendor who owns this store
     */
    vendor: string | Vendor;
    /**
     * Controls if store is visible to customers
     */
    visibility: 'hidden' | 'public' | 'restricted';
    /**
     * Store branding and appearance settings
     */
    branding?: {
        /**
         * Store logo image
         */
        logo?: (string | null) | Media;
        /**
         * Store banner image
         */
        banner?: (string | null) | Media;
        colors?: {
            /**
             * Primary brand color (hex)
             */
            primary?: string | null;
            /**
             * Secondary brand color (hex)
             */
            secondary?: string | null;
            /**
             * Accent color (hex)
             */
            accent?: string | null;
        };
        fonts?: {
            heading?:
                | ('Inter' | 'Roboto' | 'Open Sans' | 'Lato' | 'Montserrat')
                | null;
            body?:
                | ('Inter' | 'Roboto' | 'Open Sans' | 'Lato' | 'Montserrat')
                | null;
        };
    };
    /**
     * Upload images for the store hero slider (max 5 slides)
     */
    hero_slides?:
        | {
              /**
               * Upload an image (Recommended: 1920x1080px, max 2MB)
               */
              slide: string | Media;
              caption?: string | null;
              link?: string | null;
              id?: string | null;
          }[]
        | null;
    /**
     * 360° video tour of your store (max 100MB, MP4 format)
     */
    store_360_video?: (string | null) | Media;
    /**
     * Upload a 1-minute promotional video (max 50MB, MP4 format)
     */
    store_promo_video?: (string | null) | Media;
    settings?: {
        /**
         * Custom domain for the store
         */
        storeUrl?: string | null;
        currency?: 'NGN' | null;
        language?: 'en' | null;
        timezone?: string | null;
    };
    seo?: {
        /**
         * SEO title for store
         */
        title?: string | null;
        /**
         * SEO description for store
         */
        description?: string | null;
        keywords?:
            | {
                  keyword?: string | null;
                  id?: string | null;
              }[]
            | null;
        /**
         * Social sharing image
         */
        ogImage?: (string | null) | Media;
    };
    contact?: {
        email?: string | null;
        phone?: string | null;
        address?: {
            street?: string | null;
            city?: string | null;
            state?: string | null;
            postalCode?: string | null;
            country?: string | null;
        };
        socialLinks?:
            | {
                  platform?:
                      | (
                            | 'Facebook'
                            | 'Twitter'
                            | 'Instagram'
                            | 'LinkedIn'
                            | 'WhatsApp'
                        )
                      | null;
                  url?: string | null;
                  id?: string | null;
              }[]
            | null;
    };
    features?: {
        /**
         * Enable live chat with customers
         */
        livechat?: boolean | null;
        /**
         * Allow customer reviews
         */
        reviews?: boolean | null;
        /**
         * Enable customer wishlists
         */
        wishlist?: boolean | null;
        /**
         * Enable product comparisons
         */
        comparisons?: boolean | null;
    };
    /**
     * Determines if store is operational
     */
    active?: boolean | null;
    /**
     * Feature this store on the marketplace
     */
    featured?: boolean | null;
    /**
     * Mark this store as popular
     */
    popular?: boolean | null;
    /**
     * Average customer rating
     */
    rating?: number | null;
    /**
     * Store performance metrics
     */
    analytics?: {
        views?: number | null;
        orders?: number | null;
        revenue?: number | null;
    };
    createdAt: string;
    updatedAt: string;
}
/**
 * Customer profiles and preferences
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customers".
 */
export interface Customer {
    id: string;
    customerName?: string | null;
    /**
     * Associated user account
     */
    user: string | User;
    /**
     * Customer shipping addresses
     */
    shippingAddresses?:
        | {
              addressName: string;
              street: string;
              city: string;
              state: string;
              country: 'NG';
              postalCode: string;
              /**
               * Set as default shipping address
               */
              isDefault?: boolean | null;
              notes?: string | null;
              id?: string | null;
          }[]
        | null;
    preferences?: {
        notifications?: {
            email?: boolean | null;
            sms?: boolean | null;
            marketing?: boolean | null;
        };
        language?: 'en' | null;
        currency?: 'NGN' | null;
        timezone?: string | null;
    };
    metrics?: {
        totalOrders?: number | null;
        totalSpent?: number | null;
        avgOrderValue?: number | null;
        lastPurchaseDate?: string | null;
    };
    /**
     * Customer account status
     */
    status: 'active' | 'inactive' | 'blocked';
    createdAt: string;
    updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bargains".
 */
export interface Bargain {
    id: string;
    /**
     * The user who initiated the bargain
     */
    user: string | User;
    /**
     * The product being bargained for
     */
    product: string | Product;
    /**
     * The store the product belongs to
     */
    store: string | Store;
    /**
     * The original price of the product
     */
    initial_price: number;
    /**
     * The current offer from the buyer
     */
    current_offer: number;
    /**
     * The counter offer from the seller
     */
    counter_offer?: number | null;
    /**
     * The current status of the bargain
     */
    status: 'pending' | 'accepted' | 'rejected' | 'expired';
    'chat-message'?: (string | null) | ChatMessage;
    /**
     * When this bargain offer expires
     */
    expires_at: string;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products".
 */
export interface Product {
    id: string;
    /**
     * The name of the product
     */
    name: string;
    slug?: string | null;
    /**
     * The description of the product
     */
    description: string;
    /**
     * Short summary of the product
     */
    summary?: string | null;
    /**
     * The vendor that owns the product
     */
    user: string | User;
    /**
     * The store the product belongs to
     */
    store?: (string | null) | Store;
    /**
     * Product currency
     */
    currency: 'NGN';
    /**
     * Product weight
     */
    weight?: number | null;
    /**
     * Select one or more categories for this product
     */
    categories?:
        | {
              category: string | Category;
              id?: string | null;
          }[]
        | null;
    /**
     * Select one or more store categories for this product
     */
    store_categories: {
        store_category: string | StoreCategory;
        id?: string | null;
    }[];
    /**
     * Add searchable tags for this product
     */
    tags?:
        | {
              tag: string;
              id?: string | null;
          }[]
        | null;
    /**
     * Default product images
     */
    default_images: {
        image: string | Media;
        id?: string | null;
    }[];
    /**
     * Add variations of this product
     */
    variations: {
        /**
         * Name of this variation (e.g., "Small Blue", "Large Red")
         */
        name: string;
        /**
         * Unique SKU for this variation
         */
        sku: string;
        /**
         * Regular price of this variation
         */
        price: number;
        /**
         * Sale price (must be less than regular price)
         */
        sale_price?: number | null;
        /**
         * Available quantity for this variation
         */
        quantity: number;
        /**
         * Attributes specific to this variation
         */
        attributes: {
            /**
             * Name of attribute (e.g., "Color", "Size")
             */
            name: string;
            /**
             * Value of attribute (e.g., "Blue", "Large")
             */
            value: string;
            id?: string | null;
        }[];
        /**
         * Images specific to this variation
         */
        images?:
            | {
                  image: string | Media;
                  id?: string | null;
              }[]
            | null;
        /**
         * Threshold for low stock notifications
         */
        low_stock_threshold: number;
        /**
         * Whether this variation is visible to customers
         */
        is_visible?: boolean | null;
        id?: string | null;
    }[];
    /**
     * Lowest regular price among all variations
     */
    base_price?: number | null;
    /**
     * Lowest sale price among all variations
     */
    base_sale_price?: number | null;
    /**
     * Product status
     */
    status?: ('draft' | 'published' | 'archived') | null;
    /**
     * Mark this product as a best seller
     */
    best_seller?: boolean | null;
    /**
     * Mark this product as featured
     */
    is_featured?: boolean | null;
    /**
     * Currently active flash sale for this product
     */
    activeFlashSale?: (string | null) | FlashSale;
    /**
     * Mark this product as being on sale
     */
    is_on_sale?: boolean | null;
    /**
     * The date the sale starts
     */
    sale_start_date?: string | null;
    /**
     * The date the sale ends
     */
    sale_end_date?: string | null;
    /**
     * Select related products
     */
    related_products?:
        | {
              product: string | Product;
              id?: string | null;
          }[]
        | null;
    /**
     * Product reviews from customers
     */
    reviews?:
        | {
              /**
               * Customer who left the review
               */
              user: string | User;
              /**
               * Rating from 1-5 stars
               */
              rating: number;
              comment: string;
              date: string;
              verified_purchase: boolean;
              id?: string | null;
          }[]
        | null;
    /**
     * Average product rating
     */
    average_rating?: number | null;
    /**
     * Distribution of ratings
     */
    rating_distribution?:
        | {
              [k: string]: unknown;
          }
        | unknown[]
        | string
        | number
        | boolean
        | null;
    seo?: {
        title?: string | null;
        description?: string | null;
        keywords?: string | null;
    };
    createdAt: string;
    updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
    id: string;
    /**
     * The name of the category.
     */
    name: string;
    slug?: string | null;
    /**
     * The description of the category
     */
    description: string;
    /**
     * The parent category
     */
    parent_id?: (string | null) | Category;
    /**
     * image for the category.
     */
    category_image?: (string | null) | Media;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "store-categories".
 */
export interface StoreCategory {
    id: string;
    /**
     * The name of the category
     */
    name: string;
    /**
     * Description of the category
     */
    description: string;
    store: string | Store;
    /**
     * Parent category (optional)
     */
    parent?: (string | null) | StoreCategory;
    /**
     * Make this category visible to customers
     */
    isPublished?: boolean | null;
    /**
     * Category image
     */
    image?: (string | null) | Media;
    slug?: string | null;
    /**
     * Display order of the category
     */
    order?: number | null;
    /**
     * Choose the main Category this Store Category belongs to
     */
    categories?: (string | null) | Category;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "flash-sales".
 */
export interface FlashSale {
    id: string;
    name: string;
    description?: string | null;
    store: string | Store;
    products: {
        product: string | Product;
        originalPrice: number;
        salePrice: number;
        discountPercentage: number;
        quantity: number;
        id?: string | null;
    }[];
    startDate: string;
    endDate: string;
    status: 'draft' | 'scheduled' | 'active' | 'ended' | 'cancelled';
    restrictions?: {
        newCustomersOnly?: boolean | null;
        userLimit?: number | null;
        totalLimit?: number | null;
    };
    analytics?: {
        views?: number | null;
        sales?: number | null;
        revenue?: number | null;
        discountGiven?: number | null;
    };
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chat-messages".
 */
export interface ChatMessage {
    id: string;
    roomId: string;
    participants: (string | User)[];
    sender: string | User;
    type: 'bargain' | 'dispute' | 'message';
    message: string;
    metadata?: {
        bargainData?: {
            bargainId: string;
            amount: number;
            action: 'offer' | 'counter' | 'accept' | 'reject';
        };
        disputeData?: {
            disputeId: string;
            action: 'open' | 'message' | 'resolve';
        };
    };
    createdAt: string;
    updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chats".
 */
export interface Chat {
    id: string;
    roomId: string;
    type: 'bargain' | 'support' | 'order' | 'general';
    participants: (string | User)[];
    relatedEntity?: {
        type?: ('bargain' | 'order' | 'product') | null;
        id?: string | null;
    };
    conversations?:
        | {
              sender: string | User;
              message: string;
              messageType:
                  | 'text'
                  | 'image'
                  | 'bargain_offer'
                  | 'order_update'
                  | 'system';
              /**
               * Additional data for special message types
               */
              metadata?:
                  | {
                        [k: string]: unknown;
                    }
                  | unknown[]
                  | string
                  | number
                  | boolean
                  | null;
              attachments?: (string | Media)[] | null;
              readBy?: (string | User)[] | null;
              reactions?:
                  | {
                        emoji?: string | null;
                        user?: (string | null) | User;
                        id?: string | null;
                    }[]
                  | null;
              timestamp: string;
              edited?: boolean | null;
              editHistory?:
                  | {
                        message?: string | null;
                        timestamp?: string | null;
                        id?: string | null;
                    }[]
                  | null;
              id?: string | null;
          }[]
        | null;
    lastMessage?: {
        message?: string | null;
        sender?: (string | null) | User;
        timestamp?: string | null;
    };
    status: 'active' | 'archived' | 'closed';
    settings?: {
        muted?:
            | {
                  user?: (string | null) | User;
                  until?: string | null;
                  id?: string | null;
              }[]
            | null;
        pinnedMessages?:
            | {
                  messageIndex?: number | null;
                  pinnedBy?: (string | null) | User;
                  pinnedAt?: string | null;
                  id?: string | null;
              }[]
            | null;
    };
    /**
     * Additional chat metadata
     */
    metadata?:
        | {
              [k: string]: unknown;
          }
        | unknown[]
        | string
        | number
        | boolean
        | null;
    createdAt: string;
    updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notifications".
 */
export interface Notification {
    id: string;
    /**
     * User to whom the notification belongs
     */
    user?: (string | null) | User;
    /**
     * Type of notification
     */
    type:
        | 'welcome'
        | 'review_pending'
        | 'order_shipped'
        | 'order_delivered'
        | 'order_cancelled'
        | 'order_refunded'
        | 'order_disputed'
        | 'order_dispute_resolved'
        | 'order_dispute_closed'
        | 'order_status'
        | 'order_payment'
        | 'order_error'
        | 'order_notification'
        | 'new_feature'
        | 'promotion'
        | 'bargain_offer'
        | 'bargain_accepted'
        | 'bargain_rejected'
        | 'bargain_expired'
        | 'bargain_counter_offer'
        | 'system_error'
        | 'status_change'
        | 'preferences_update'
        | 'transfer_initiated'
        | 'transfer_completed'
        | 'transfer_failed'
        | 'transfer_reversed'
        | 'wallet_transaction'
        | 'escrow_initiated'
        | 'escrow_completed'
        | 'escrow_failed'
        | 'escrow_reversed'
        | 'escrow_dispute'
        | 'escrow_dispute_resolved'
        | 'escrow_dispute_closed'
        | 'escrow_status'
        | 'escrow_release'
        | 'escrow_refund'
        | 'escrow_error'
        | 'waitlist_join'
        | 'stock_alert'
        | 'stock_update'
        | 'low_stock';
    /**
     * Subject of the notification (used for emails)
     */
    subject: string;
    /**
     * Title of the notification (used for in-app notifications)
     */
    title: string;
    /**
     * Detailed content of the notification
     */
    content: string;
    /**
     * Priority level of the notification
     */
    priority: 'low' | 'medium' | 'high';
    /**
     * Indicates if the notification has been read
     */
    read?: boolean | null;
    /**
     * Additional data associated with the notification
     */
    metadata?:
        | {
              [k: string]: unknown;
          }
        | unknown[]
        | string
        | number
        | boolean
        | null;
    /**
     * Optional link associated with the notification
     */
    link?: string | null;
    /**
     * Timestamp when the notification was created
     */
    createdAt: string;
    /**
     * Timestamp when the notification was last updated
     */
    updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders".
 */
export interface Order {
    id: string;
    /**
     * Unique order number
     */
    orderNumber?: string | null;
    /**
     * Unique order number from Fez
     */
    fezOrderNumber?: string | null;
    user: string | User;
    store: string | Store;
    items: {
        /**
         * Unique order number from Fez
         */
        fezOrderNumber?: string | null;
        product: string | Product;
        quantity: number;
        price: number;
        id?: string | null;
    }[];
    /**
     * Shipping cost calculated from third party API
     */
    shipping_cost: number;
    /**
     * Order amount before shipping
     */
    subtotal: number;
    /**
     * Total order amount including shipping
     */
    total_amount: number;
    status:
        | 'pending'
        | 'accepted'
        | 'paid'
        | 'shipped'
        | 'delivered'
        | 'cancelled';
    shipping_address: {
        street: string;
        city: string;
        state: string;
        zip_code: string;
        country: string;
    };
    payment_info: {
        method: string;
        payment_reference: string;
    };
    escrow?: (string | null) | Escrow;
    escrowStatus?: string | null;
    requiresAttention?: boolean | null;
    attentionReason?: string | null;
    /**
     * Additional order notes
     */
    notes?: string | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "escrow".
 */
export interface Escrow {
    id: string;
    escrowId: string;
    order: string | Order;
    customer: string | User;
    vendor: string | Vendor;
    /**
     * Product amount (subtotal before shipping and fees)
     */
    amount: number;
    platformFee: number;
    /**
     * Total amount including shipping and fees
     */
    totalAmount?: number | null;
    status:
        | 'pending'
        | 'funded'
        | 'released'
        | 'refunded'
        | 'disputed'
        | 'completed'
        | 'failed';
    paymentReference?: string | null;
    /**
     * Active dispute for this escrow
     */
    dispute?: (string | null) | Dispute;
    disputeDetails?: {
        status?: ('open' | 'reviewing' | 'resolved' | 'rejected') | null;
        reason?: string | null;
        resolution?: string | null;
        resolvedAt?: string | null;
    };
    expiresAt: string;
    completedAt?: string | null;
    isLocked?: boolean | null;
    lockExpiresAt?: string | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "disputes".
 */
export interface Dispute {
    id: string;
    /**
     * Related escrow if this dispute is about an escrow payment
     */
    escrow?: (string | null) | Escrow;
    /**
     * A brief title for the dispute
     */
    title: string;
    /**
     * Detailed description of the dispute
     */
    description: string;
    /**
     * The current status of the dispute
     */
    status: 'open' | 'inProgress' | 'resolved' | 'closed';
    /**
     * The product associated with the dispute
     */
    product: string | Product;
    /**
     * The user who filed the dispute
     */
    user: string | User;
    'chat-message'?: (string | null) | ChatMessage;
    /**
     * The order associated with the dispute
     */
    order: string | Order;
    /**
     * The resolution of the dispute
     */
    resolution?: string | null;
    /**
     * The date the dispute was resolved
     */
    resolution_date?: string | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "plans".
 */
export interface Plan {
    id: string;
    /**
     * Display name of the plan (e.g., "Professional Plan")
     */
    name: string;
    /**
     * Unique code for the plan (e.g., "professional")
     */
    code: string;
    /**
     * Brief description of the plan
     */
    description: string;
    /**
     * Monthly price in Naira
     */
    monthlyPrice: number;
    /**
     * One-time setup fee in Naira
     */
    setupFee?: number | null;
    /**
     * Number of trial days (0 for no trial)
     */
    trialDays: number;
    /**
     * List of features included in this plan
     */
    features: {
        feature: string;
        description?: string | null;
        included: boolean;
        id?: string | null;
    }[];
    limits: {
        /**
         * Maximum number of products (-1 for unlimited)
         */
        products: number;
        /**
         * Maximum number of stores
         */
        stores: number;
        /**
         * Storage limit in GB
         */
        storage: number;
        /**
         * Maximum number of staff accounts
         */
        staff: number;
        /**
         * Monthly transaction limit (-1 for unlimited)
         */
        monthlyTransactions: number;
    };
    /**
     * Paystack plan details (automatically managed)
     */
    paystackPlan?:
        | {
              [k: string]: unknown;
          }
        | unknown[]
        | string
        | number
        | boolean
        | null;
    /**
     * Order in which to display plans (lower numbers first)
     */
    displayOrder: number;
    /**
     * Whether this plan is currently available
     */
    active: boolean;
    /**
     * Set as default plan for new vendors
     */
    isDefaultPlan: boolean;
    /**
     * Additional plan metadata
     */
    metadata?:
        | {
              [k: string]: unknown;
          }
        | unknown[]
        | string
        | number
        | boolean
        | null;
    createdAt: string;
    updatedAt: string;
}
/**
 * Manage vendor follows
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "vendor-follows".
 */
export interface VendorFollow {
    id: string;
    /**
     * The user following the vendor
     */
    follower: string | User;
    /**
     * The vendor being followed
     */
    vendor: string | User;
    /**
     * Date when vendor was followed
     */
    followedAt?: string | null;
    /**
     * Notify when vendor lists new products
     */
    notifyOnNewProducts?: boolean | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * Reviews for vendors, stores, and products
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews".
 */
export interface Review {
    id: string;
    /**
     * Review title/summary
     */
    title: string;
    /**
     * Detailed review content
     */
    content: string;
    /**
     * Rating from 1-5 stars
     */
    rating: number;
    /**
     * User who wrote the review
     */
    author: string | User;
    /**
     * Type of entity being reviewed
     */
    entityType: 'vendor' | 'store' | 'product';
    /**
     * Entity being reviewed
     */
    entity:
        | {
              relationTo: 'vendors';
              value: string | Vendor;
          }
        | {
              relationTo: 'stores';
              value: string | Store;
          }
        | {
              relationTo: 'products';
              value: string | Product;
          };
    /**
     * Images attached to review (max 5)
     */
    images?:
        | {
              image: string | Media;
              id?: string | null;
          }[]
        | null;
    /**
     * Keywords/tags for the review
     */
    tags?:
        | {
              tag: string;
              id?: string | null;
          }[]
        | null;
    status: 'pending' | 'published' | 'rejected';
    /**
     * Reason for rejection (if applicable)
     */
    rejectionReason?: string | null;
    /**
     * Vendor response to the review
     */
    vendorReply?: {
        content?: string | null;
        repliedAt?: string | null;
        updatedAt?: string | null;
    };
    /**
     * Users who found this review helpful
     */
    helpfulVotes?:
        | {
              user: string | User;
              id?: string | null;
          }[]
        | null;
    /**
     * Indicates if this is a verified purchase review
     */
    verified?: boolean | null;
    createdAt: string;
    updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subscription-history".
 */
export interface SubscriptionHistory {
    id: string;
    /**
     * Vendor associated with this subscription record
     */
    vendor: string | Vendor;
    /**
     * Plan subscribed to
     */
    plan: string | Plan;
    status:
        | 'active'
        | 'cancelled'
        | 'failed'
        | 'past_due'
        | 'trial'
        | 'expired';
    /**
     * Unique transaction ID from payment provider
     */
    transactionId: string;
    /**
     * Amount paid in kobo
     */
    amount: number;
    currency: 'NGN';
    billingPeriod: {
        startDate: string;
        endDate: string;
    };
    paymentMethod: {
        type: 'card' | 'bank_transfer' | 'ussd';
        /**
         * Last 4 digits of card (if applicable)
         */
        lastFour?: string | null;
        /**
         * Card brand (if applicable)
         */
        brand?: string | null;
    };
    metadata?: {
        invoiceNumber?: string | null;
        promoCode?: string | null;
        discountAmount?: number | null;
    };
    /**
     * Whether subscription will auto-renew
     */
    autoRenew?: boolean | null;
    cancellationDetails?: {
        cancelledAt?: string | null;
        reason?: string | null;
        cancelledBy?: (string | null) | User;
    };
    createdAt: string;
    updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "promotions".
 */
export interface Promotion {
    id: string;
    /**
     * The image to be used in the promo
     */
    badge: string | Media;
    /**
     * When this promo should start running
     */
    start_date: string;
    /**
     * When this promo should stop running
     */
    end_date: string;
    discount: string;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "heroes".
 */
export interface Hero {
    id: string;
    /**
     * The store this advertisement belongs to
     */
    store?: (string | null) | Store;
    /**
     * The store this advertisement belongs to
     */
    promotion?: (string | null) | Promotion;
    /**
     * The title of the hero
     */
    title: string;
    /**
     * Button text
     */
    buttonText: string;
    /**
     * Subtitle text
     */
    subtitle: string;
    /**
     * Detailed description of the advertisement
     */
    description: string;
    /**
     * The image to be used in the hero
     */
    image: string | Media;
    /**
     * When this advertisement should start running
     */
    start_date: string;
    /**
     * When this advertisement should stop running
     */
    end_date: string;
    priority?: number | null;
    /**
     * Current theme of the hero
     */
    theme: 'christmas' | 'holiday' | 'easter' | 'ramadan';
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "carts".
 */
export interface Cart {
    id: string;
    user: string | User;
    items?:
        | {
              product: string | Product;
              store: string | Store;
              quantity: number;
              price: number;
              selected?: boolean | null;
              variation: {
                  id: string;
                  name: string;
                  attributes?:
                      | {
                            name: string;
                            value: string;
                            id?: string | null;
                        }[]
                      | null;
              };
              id?: string | null;
          }[]
        | null;
    totals?: {
        subtotal?: number | null;
        tax?: number | null;
        shipping?: number | null;
        total?: number | null;
        itemCount?: number | null;
    };
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "account-settings".
 */
export interface AccountSetting {
    id: string;
    user: string | User;
    notification_preferences?: {
        email_notifications?: boolean | null;
        order_updates?: boolean | null;
        promotional_emails?: boolean | null;
    };
    privacy_settings?: {
        profile_visibility?: ('public' | 'private') | null;
        show_order_history?: boolean | null;
    };
    preferences?: {
        language?: ('en' | 'es' | 'fr') | null;
        currency?: ('USD' | 'EUR' | 'GBP') | null;
    };
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "return_policies".
 */
export interface ReturnPolicy {
    id: string;
    /**
     * The store this return policy belongs to
     */
    store: string | Store;
    /**
     * Name of the return policy
     */
    name: string;
    /**
     * Detailed description of the return policy
     */
    description: string;
    /**
     * Number of days allowed for returns
     */
    days_to_return: number;
    /**
     * Type of refund offered
     */
    refund_type: 'full' | 'partial' | 'exchange';
    /**
     * Restocking fee percentage (0-100)
     */
    restocking_fee?: number | null;
    /**
     * Categories where this return policy applies
     */
    applicable_categories: {
        category: string;
        id?: string | null;
    }[];
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "advertisements".
 */
export interface Advertisement {
    id: string;
    /**
     * The store this advertisement belongs to
     */
    store: string | Store;
    /**
     * The title of the advertisement
     */
    title: string;
    /**
     * Detailed description of the advertisement
     */
    description: string;
    /**
     * The image to be used in the advertisement
     */
    image: string | Media;
    /**
     * The URL where users will be directed when clicking the ad
     */
    targetUrl: string;
    /**
     * When this advertisement should start running
     */
    start_date: string;
    /**
     * When this advertisement should stop running
     */
    end_date: string;
    /**
     * Total budget allocated for this advertisement
     */
    budget: number;
    /**
     * Number of times the ad has been viewed
     */
    impressions: number;
    /**
     * Number of times the ad has been clicked
     */
    clicks: number;
    /**
     * Current status of the advertisement
     */
    status: 'active' | 'paused' | 'completed';
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recommendations".
 */
export interface Recommendation {
    id: string;
    /**
     * Type of recommendation
     */
    recommendation_type:
        | 'personalized'
        | 'similar_products'
        | 'frequently_bought_together'
        | 'trending'
        | 'category_based'
        | 'price_range'
        | 'seasonal';
    /**
     * Specific user this recommendation is for (if personalized)
     */
    target_user?: (string | null) | User;
    /**
     * Source product for similar/related recommendations
     */
    source_product?: (string | null) | Product;
    /**
     * Target category for category-based recommendations
     */
    target_category?: (string | null) | Category;
    /**
     * List of products to recommend
     */
    recommended_products: {
        product: string | Product;
        /**
         * Score indicating how relevant this recommendation is (0-1)
         */
        relevance_score: number;
        /**
         * Reason for recommending this product
         */
        recommendation_reason?: string | null;
        id?: string | null;
    }[];
    /**
     * Price range for recommendations
     */
    price_range?: {
        min_price: number;
        max_price: number;
    };
    /**
     * Seasonal recommendation details
     */
    seasonal_info?: {
        season: 'spring' | 'summer' | 'fall' | 'winter';
        start_date: string;
        end_date: string;
    };
    /**
     * Whether this recommendation is currently active
     */
    active?: boolean | null;
    /**
     * Priority of this recommendation (1-100)
     */
    priority: number;
    /**
     * Percentage of recommendations that led to purchases
     */
    conversion_rate?: number | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "order_trackings".
 */
export interface OrderTracking {
    id: string;
    /**
     * The order being tracked
     */
    order: string | Order;
    status: 'confirmed' | 'shipped' | 'out_for_delivery' | 'delivered';
    /**
     * Current location of the order
     */
    current_location: string;
    tracking_history?:
        | {
              status:
                  | 'confirmed'
                  | 'shipped'
                  | 'out_for_delivery'
                  | 'delivered';
              location: string;
              timestamp: string;
              notes?: string | null;
              id?: string | null;
          }[]
        | null;
    carrier_info: {
        name: string;
        tracking_number: string;
        tracking_url?: string | null;
    };
    estimated_delivery: string;
    actual_delivery?: string | null;
    last_updated?: string | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "black-friday-deals".
 */
export interface BlackFridayDeal {
    id: string;
    /**
     * Name of the Black Friday campaign
     */
    name: string;
    /**
     * Store running the Black Friday deals
     */
    store: string | Store;
    /**
     * Current status of the Black Friday campaign
     */
    status: 'draft' | 'scheduled' | 'active' | 'ended';
    /**
     * When the Black Friday deals start
     */
    start_date: string;
    /**
     * When the Black Friday deals end
     */
    end_date: string;
    /**
     * Products included in the Black Friday deal
     */
    deal_products: {
        product: string | Product;
        discount_type: 'percentage' | 'fixed';
        /**
         * Percentage off or new fixed price depending on discount type
         */
        discount_value: number;
        /**
         * Maximum quantity per customer (optional)
         */
        quantity_limit?: number | null;
        id?: string | null;
    }[];
    /**
     * Description of the Black Friday campaign
     */
    description?: string | null;
    /**
     * Banner image for the Black Friday campaign
     */
    banner_image?: (string | null) | Media;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wallet-transactions".
 */
export interface WalletTransaction {
    id: string;
    /**
     * Unique transaction identifier
     */
    transactionId: string;
    wallet: string | Vendor;
    type:
        | 'order_payment'
        | 'escrow_hold'
        | 'escrow_release'
        | 'withdrawal'
        | 'refund'
        | 'fee';
    amount: number;
    fee?: number | null;
    netAmount?: number | null;
    currency?: 'NGN' | null;
    status: 'pending' | 'processing' | 'completed' | 'failed' | 'reversed';
    relatedEntities?: {
        order?: (string | null) | Order;
        transfer?: (string | null) | Transfer;
    };
    paystackReference?: string | null;
    metadata?:
        | {
              [k: string]: unknown;
          }
        | unknown[]
        | string
        | number
        | boolean
        | null;
    createdAt: string;
    updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "transfers".
 */
export interface Transfer {
    id: string;
    /**
     * Unique transfer identifier
     */
    transferId: string;
    wallet: string | Vendor;
    amount: number;
    fee?: number | null;
    currency?: 'NGN' | null;
    status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';
    recipientDetails: {
        recipientCode: string;
        accountName: string;
        accountNumber: string;
        bankCode: string;
    };
    paystackTransfer?: {
        reference?: string | null;
        transferCode?: string | null;
        recipientCode?: string | null;
    };
    reason?: string | null;
    metadata?:
        | {
              [k: string]: unknown;
          }
        | unknown[]
        | string
        | number
        | boolean
        | null;
    createdAt: string;
    updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter-subscriptions".
 */
export interface NewsletterSubscription {
    id: string;
    /**
     * Subscriber email address
     */
    email: string;
    /**
     * Subscriber name (optional)
     */
    name?: string | null;
    /**
     * Subscription status
     */
    status: 'active' | 'unsubscribed';
    /**
     * Newsletter preferences
     */
    preferences?: ('product_updates' | 'news_blog' | 'promotions')[] | null;
    /**
     * Where the subscriber signed up from
     */
    source?: string | null;
    /**
     * Date of last email sent
     */
    lastEmailSent?: string | null;
    /**
     * Date when unsubscribed
     */
    unsubscribedAt?: string | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * Vendor subscription records
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subscriptions".
 */
export interface Subscription {
    id: string;
    userId: string | User;
    planId: string | Plan;
    status: 'trialing' | 'active' | 'past_due' | 'canceled' | 'expired';
    interval: 'monthly' | 'yearly';
    currentPeriodStart: string;
    currentPeriodEnd: string;
    cancelAtPeriodEnd?: boolean | null;
    trialEndsAt?: string | null;
    canceledAt?: string | null;
    endedAt?: string | null;
    lastPaymentError?: string | null;
    flutterwave?: {
        customerId?: string | null;
        subscriptionId?: string | null;
        paymentMethodId?: string | null;
    };
    billingDetails: {
        name: string;
        email: string;
        phone?: string | null;
        address: {
            line1: string;
            line2?: string | null;
            city: string;
            state: string;
            country: string;
            postalCode: string;
        };
        taxId?: string | null;
    };
    updatedAt: string;
    createdAt: string;
}
/**
 * Manage user saved/favorited items
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "saved-items".
 */
export interface SavedItem {
    id: string;
    /**
     * The user who saved the item
     */
    user: string | User;
    /**
     * The saved product
     */
    product: string | Product;
    /**
     * Date when item was saved
     */
    savedAt?: string | null;
    /**
     * Optional notes about the saved item
     */
    notes?: string | null;
    /**
     * Notify user when this product goes on sale
     */
    notifyOnSale?: boolean | null;
    /**
     * Notify user when this product is restocked
     */
    notifyOnRestock?: boolean | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "transactions".
 */
export interface Transaction {
    id: string;
    reference: string;
    type: 'payment' | 'withdrawal' | 'refund';
    amount: number;
    status: 'pending' | 'completed' | 'failed';
    vendor: string | Vendor;
    order?: (string | null) | Order;
    paystackReference?: string | null;
    metadata?:
        | {
              [k: string]: unknown;
          }
        | unknown[]
        | string
        | number
        | boolean
        | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "waitlist".
 */
export interface Waitlist {
    id: string;
    fullName: string;
    /**
     * Email must be unique
     */
    email: string;
    phoneNumber: string;
    status: 'pending' | 'contacted' | 'approved' | 'rejected';
    source: 'website' | 'mobile' | 'social' | 'referral';
    agreedToTerms: boolean;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "automations".
 */
export interface Automation {
    id: string;
    name: string;
    condition?: (string | null) | Condition;
    action?: (string | null) | Action;
    status?: ('active' | 'inactive') | null;
    triggerType: 'scheduled' | 'event';
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "conditions".
 */
export interface Condition {
    id: string;
    name: string;
    key: string;
    parameterFields?:
        | {
              fieldName: string;
              fieldType?: ('text' | 'number' | 'date' | 'select') | null;
              options?:
                  | {
                        label?: string | null;
                        value?: string | null;
                        id?: string | null;
                    }[]
                  | null;
              id?: string | null;
          }[]
        | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "actions".
 */
export interface Action {
    id: string;
    name: string;
    key: string;
    parameterFields?:
        | {
              fieldName: string;
              fieldType?: ('text' | 'number' | 'richText' | 'select') | null;
              options?:
                  | {
                        label?: string | null;
                        value?: string | null;
                        id?: string | null;
                    }[]
                  | null;
              id?: string | null;
          }[]
        | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * Store customer body measurements
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "measurements".
 */
export interface Measurement {
    id: string;
    /**
     * User these measurements belong to
     */
    user: string | User;
    /**
     * Height measurement in cm
     */
    height: string;
    /**
     * Waist measurement in cm
     */
    waist: string;
    /**
     * Belly measurement in cm
     */
    belly: string;
    /**
     * Chest measurement in cm
     */
    chest: string;
    /**
     * Wrist measurement in cm
     */
    wrist: string;
    /**
     * Neck measurement in cm
     */
    neck: string;
    /**
     * Arm length measurement in cm
     */
    arm_length: string;
    /**
     * Thigh measurement in cm
     */
    thigh: string;
    /**
     * Shoulder width measurement in cm
     */
    shoulder_width: string;
    /**
     * Hips measurement in cm
     */
    hips: string;
    /**
     * Ankle measurement in cm
     */
    ankle: string;
    lastUpdated?: string | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * Manage store advertisements
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "store-adverts".
 */
export interface StoreAdvert {
    id: string;
    /**
     * Store this advertisement belongs to
     */
    store: string | Store;
    /**
     * Position and size of the advertisement
     */
    position: '700x400' | '200x900' | '1024x300';
    /**
     * Advertisement image
     */
    image: string | Media;
    /**
     * Link to redirect to when clicked (optional)
     */
    link?: string | null;
    /**
     * Whether this advertisement is currently active
     */
    active?: boolean | null;
    /**
     * Advertisement performance metrics
     */
    metrics?: {
        views?: number | null;
        clicks?: number | null;
        lastViewed?: string | null;
    };
    createdAt: string;
    updatedAt: string;
}
/**
 * Track store advertisement performance
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "store-advert-metrics".
 */
export interface StoreAdvertMetric {
    id: string;
    /**
     * Advertisement being tracked
     */
    advert: string | StoreAdvert;
    /**
     * Number of times this ad was viewed
     */
    views: number;
    /**
     * Number of times this ad was clicked
     */
    clicks: number;
    /**
     * When this ad was last viewed
     */
    lastViewed?: string | null;
    createdAt: string;
    updatedAt: string;
}
/**
 * Shared customer measurements with vendors
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shared-measurements".
 */
export interface SharedMeasurement {
    id: string;
    /**
     * User who shared their measurements
     */
    user: string | User;
    /**
     * Vendor who received the measurements
     */
    vendor?: (string | null) | User;
    /**
     * The shared measurements
     */
    measurements: string | Measurement;
    /**
     * Status of the shared measurements
     */
    status: 'active' | 'revoked';
    createdAt: string;
    updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "kyc".
 */
export interface Kyc {
    id: string;
    user: string | User;
    nin: string;
    bank: string;
    accountNumber: string;
    accountName: string;
    match?: boolean | null;
    verificationStatus: 'pending' | 'in_progress' | 'verified' | 'rejected';
    verificationStep?:
        | (
              | 'plan_pending'
              | 'nin_pending'
              | 'nin_verified'
              | 'account_pending'
              | 'account_verified'
              | 'completed'
          )
        | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
    id: string;
    document?:
        | ({
              relationTo: 'activity-logs';
              value: string | ActivityLog;
          } | null)
        | ({
              relationTo: 'users';
              value: string | User;
          } | null)
        | ({
              relationTo: 'media';
              value: string | Media;
          } | null)
        | ({
              relationTo: 'vendors';
              value: string | Vendor;
          } | null)
        | ({
              relationTo: 'bargains';
              value: string | Bargain;
          } | null)
        | ({
              relationTo: 'chats';
              value: string | Chat;
          } | null)
        | ({
              relationTo: 'chat-messages';
              value: string | ChatMessage;
          } | null)
        | ({
              relationTo: 'stores';
              value: string | Store;
          } | null)
        | ({
              relationTo: 'customers';
              value: string | Customer;
          } | null)
        | ({
              relationTo: 'notifications';
              value: string | Notification;
          } | null)
        | ({
              relationTo: 'orders';
              value: string | Order;
          } | null)
        | ({
              relationTo: 'plans';
              value: string | Plan;
          } | null)
        | ({
              relationTo: 'products';
              value: string | Product;
          } | null)
        | ({
              relationTo: 'vendor-follows';
              value: string | VendorFollow;
          } | null)
        | ({
              relationTo: 'reviews';
              value: string | Review;
          } | null)
        | ({
              relationTo: 'store-categories';
              value: string | StoreCategory;
          } | null)
        | ({
              relationTo: 'categories';
              value: string | Category;
          } | null)
        | ({
              relationTo: 'subscription-history';
              value: string | SubscriptionHistory;
          } | null)
        | ({
              relationTo: 'promotions';
              value: string | Promotion;
          } | null)
        | ({
              relationTo: 'heroes';
              value: string | Hero;
          } | null)
        | ({
              relationTo: 'disputes';
              value: string | Dispute;
          } | null)
        | ({
              relationTo: 'carts';
              value: string | Cart;
          } | null)
        | ({
              relationTo: 'account-settings';
              value: string | AccountSetting;
          } | null)
        | ({
              relationTo: 'return_policies';
              value: string | ReturnPolicy;
          } | null)
        | ({
              relationTo: 'advertisements';
              value: string | Advertisement;
          } | null)
        | ({
              relationTo: 'recommendations';
              value: string | Recommendation;
          } | null)
        | ({
              relationTo: 'flash-sales';
              value: string | FlashSale;
          } | null)
        | ({
              relationTo: 'escrow';
              value: string | Escrow;
          } | null)
        | ({
              relationTo: 'order_trackings';
              value: string | OrderTracking;
          } | null)
        | ({
              relationTo: 'black-friday-deals';
              value: string | BlackFridayDeal;
          } | null)
        | ({
              relationTo: 'wallet-transactions';
              value: string | WalletTransaction;
          } | null)
        | ({
              relationTo: 'newsletter-subscriptions';
              value: string | NewsletterSubscription;
          } | null)
        | ({
              relationTo: 'subscriptions';
              value: string | Subscription;
          } | null)
        | ({
              relationTo: 'saved-items';
              value: string | SavedItem;
          } | null)
        | ({
              relationTo: 'transfers';
              value: string | Transfer;
          } | null)
        | ({
              relationTo: 'transactions';
              value: string | Transaction;
          } | null)
        | ({
              relationTo: 'waitlist';
              value: string | Waitlist;
          } | null)
        | ({
              relationTo: 'automations';
              value: string | Automation;
          } | null)
        | ({
              relationTo: 'conditions';
              value: string | Condition;
          } | null)
        | ({
              relationTo: 'actions';
              value: string | Action;
          } | null)
        | ({
              relationTo: 'measurements';
              value: string | Measurement;
          } | null)
        | ({
              relationTo: 'store-adverts';
              value: string | StoreAdvert;
          } | null)
        | ({
              relationTo: 'store-advert-metrics';
              value: string | StoreAdvertMetric;
          } | null)
        | ({
              relationTo: 'shared-measurements';
              value: string | SharedMeasurement;
          } | null)
        | ({
              relationTo: 'kyc';
              value: string | Kyc;
          } | null);
    globalSlug?: string | null;
    user: {
        relationTo: 'users';
        value: string | User;
    };
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
    id: string;
    user: {
        relationTo: 'users';
        value: string | User;
    };
    key?: string | null;
    value?:
        | {
              [k: string]: unknown;
          }
        | unknown[]
        | string
        | number
        | boolean
        | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
    id: string;
    name?: string | null;
    batch?: number | null;
    updatedAt: string;
    createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activity-logs_select".
 */
export interface ActivityLogsSelect<T extends boolean = true> {
    action?: T;
    status?: T;
    performedBy?: T;
    entityCollection?: T;
    entityId?: T;
    fields?:
        | T
        | {
              fieldName?: T;
              id?: T;
          };
    message?: T;
    ip?: T;
    userAgent?: T;
    metadata?: T;
    oldValue?: T;
    newValue?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
    role?: T;
    name?: T;
    businessName?: T;
    phoneNumber?: T;
    isActive?: T;
    emailVerified?: T;
    verification_token?: T;
    verification_expiry?: T;
    profilePicture?: T;
    lockedUntil?: T;
    vendorProfile?: T;
    store?: T;
    customerProfile?: T;
    lastLogin?: T;
    createdAt?: T;
    updatedAt?: T;
    enableAPIKey?: T;
    apiKey?: T;
    apiKeyIndex?: T;
    email?: T;
    resetPasswordToken?: T;
    resetPasswordExpiration?: T;
    salt?: T;
    hash?: T;
    loginAttempts?: T;
    lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
    alt?: T;
    uploadedBy?: T;
    isPublic?: T;
    caption?: T;
    tags?:
        | T
        | {
              tag?: T;
              id?: T;
          };
    fileDetails?:
        | T
        | {
              filename?: T;
              filesize?: T;
              mimeType?: T;
          };
    prefix?: T;
    updatedAt?: T;
    createdAt?: T;
    url?: T;
    thumbnailURL?: T;
    filename?: T;
    mimeType?: T;
    filesize?: T;
    width?: T;
    height?: T;
    focalX?: T;
    focalY?: T;
    sizes?:
        | T
        | {
              thumbnail?:
                  | T
                  | {
                        url?: T;
                        width?: T;
                        height?: T;
                        mimeType?: T;
                        filesize?: T;
                        filename?: T;
                    };
              card?:
                  | T
                  | {
                        url?: T;
                        width?: T;
                        height?: T;
                        mimeType?: T;
                        filesize?: T;
                        filename?: T;
                    };
              tablet?:
                  | T
                  | {
                        url?: T;
                        width?: T;
                        height?: T;
                        mimeType?: T;
                        filesize?: T;
                        filename?: T;
                    };
              extraLarge?:
                  | T
                  | {
                        url?: T;
                        width?: T;
                        height?: T;
                        mimeType?: T;
                        filesize?: T;
                        filename?: T;
                    };
          };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "vendors_select".
 */
export interface VendorsSelect<T extends boolean = true> {
    user?: T;
    verificationStatus?: T;
    verificationTier?: T;
    ninVerification?:
        | T
        | {
              ninNumber?: T;
              verifiedAt?: T;
              verificationId?: T;
              verifiedData?:
                  | T
                  | {
                        firstName?: T;
                        middleName?: T;
                        lastName?: T;
                        dateOfBirth?: T;
                        phoneNumber?: T;
                    };
          };
    cacVerification?:
        | T
        | {
              cacNumber?: T;
              verifiedAt?: T;
              verificationId?: T;
              companyName?: T;
              companyType?: T;
              registrationDate?: T;
              directors?:
                  | T
                  | {
                        name?: T;
                        position?: T;
                        id?: T;
                    };
          };
    businessDetails?:
        | T
        | {
              businessName?: T;
              businessEmail?: T;
              businessPhone?: T;
              address?:
                  | T
                  | {
                        street?: T;
                        city?: T;
                        state?: T;
                        country?: T;
                        postalCode?: T;
                    };
          };
    bankDetails?:
        | T
        | {
              bankCode?: T;
              accountNumber?: T;
              recipientCode?: T;
              accountName?: T;
          };
    commissionRate?: T;
    wallet?:
        | T
        | {
              walletId?: T;
              balances?:
                  | T
                  | {
                        total?: T;
                        escrow?: T;
                        available?: T;
                    };
              withdrawalSettings?:
                  | T
                  | {
                        minimumWithdrawal?: T;
                        autoWithdrawal?: T;
                        autoWithdrawalThreshold?: T;
                    };
              status?: T;
          };
    store?: T;
    createdAt?: T;
    updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bargains_select".
 */
export interface BargainsSelect<T extends boolean = true> {
    user?: T;
    product?: T;
    store?: T;
    initial_price?: T;
    current_offer?: T;
    counter_offer?: T;
    status?: T;
    'chat-message'?: T;
    expires_at?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chats_select".
 */
export interface ChatsSelect<T extends boolean = true> {
    roomId?: T;
    type?: T;
    participants?: T;
    relatedEntity?:
        | T
        | {
              type?: T;
              id?: T;
          };
    conversations?:
        | T
        | {
              sender?: T;
              message?: T;
              messageType?: T;
              metadata?: T;
              attachments?: T;
              readBy?: T;
              reactions?:
                  | T
                  | {
                        emoji?: T;
                        user?: T;
                        id?: T;
                    };
              timestamp?: T;
              edited?: T;
              editHistory?:
                  | T
                  | {
                        message?: T;
                        timestamp?: T;
                        id?: T;
                    };
              id?: T;
          };
    lastMessage?:
        | T
        | {
              message?: T;
              sender?: T;
              timestamp?: T;
          };
    status?: T;
    settings?:
        | T
        | {
              muted?:
                  | T
                  | {
                        user?: T;
                        until?: T;
                        id?: T;
                    };
              pinnedMessages?:
                  | T
                  | {
                        messageIndex?: T;
                        pinnedBy?: T;
                        pinnedAt?: T;
                        id?: T;
                    };
          };
    metadata?: T;
    createdAt?: T;
    updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "chat-messages_select".
 */
export interface ChatMessagesSelect<T extends boolean = true> {
    roomId?: T;
    participants?: T;
    sender?: T;
    type?: T;
    message?: T;
    metadata?:
        | T
        | {
              bargainData?:
                  | T
                  | {
                        bargainId?: T;
                        amount?: T;
                        action?: T;
                    };
              disputeData?:
                  | T
                  | {
                        disputeId?: T;
                        action?: T;
                    };
          };
    createdAt?: T;
    updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "stores_select".
 */
export interface StoresSelect<T extends boolean = true> {
    storeNumber?: T;
    storeName?: T;
    vendor?: T;
    visibility?: T;
    branding?:
        | T
        | {
              logo?: T;
              banner?: T;
              colors?:
                  | T
                  | {
                        primary?: T;
                        secondary?: T;
                        accent?: T;
                    };
              fonts?:
                  | T
                  | {
                        heading?: T;
                        body?: T;
                    };
          };
    hero_slides?:
        | T
        | {
              slide?: T;
              caption?: T;
              link?: T;
              id?: T;
          };
    store_360_video?: T;
    store_promo_video?: T;
    settings?:
        | T
        | {
              storeUrl?: T;
              currency?: T;
              language?: T;
              timezone?: T;
          };
    seo?:
        | T
        | {
              title?: T;
              description?: T;
              keywords?:
                  | T
                  | {
                        keyword?: T;
                        id?: T;
                    };
              ogImage?: T;
          };
    contact?:
        | T
        | {
              email?: T;
              phone?: T;
              address?:
                  | T
                  | {
                        street?: T;
                        city?: T;
                        state?: T;
                        postalCode?: T;
                        country?: T;
                    };
              socialLinks?:
                  | T
                  | {
                        platform?: T;
                        url?: T;
                        id?: T;
                    };
          };
    features?:
        | T
        | {
              livechat?: T;
              reviews?: T;
              wishlist?: T;
              comparisons?: T;
          };
    active?: T;
    featured?: T;
    popular?: T;
    rating?: T;
    analytics?:
        | T
        | {
              views?: T;
              orders?: T;
              revenue?: T;
          };
    createdAt?: T;
    updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customers_select".
 */
export interface CustomersSelect<T extends boolean = true> {
    customerName?: T;
    user?: T;
    shippingAddresses?:
        | T
        | {
              addressName?: T;
              street?: T;
              city?: T;
              state?: T;
              country?: T;
              postalCode?: T;
              isDefault?: T;
              notes?: T;
              id?: T;
          };
    preferences?:
        | T
        | {
              notifications?:
                  | T
                  | {
                        email?: T;
                        sms?: T;
                        marketing?: T;
                    };
              language?: T;
              currency?: T;
              timezone?: T;
          };
    metrics?:
        | T
        | {
              totalOrders?: T;
              totalSpent?: T;
              avgOrderValue?: T;
              lastPurchaseDate?: T;
          };
    status?: T;
    createdAt?: T;
    updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notifications_select".
 */
export interface NotificationsSelect<T extends boolean = true> {
    user?: T;
    type?: T;
    subject?: T;
    title?: T;
    content?: T;
    priority?: T;
    read?: T;
    metadata?: T;
    link?: T;
    createdAt?: T;
    updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders_select".
 */
export interface OrdersSelect<T extends boolean = true> {
    orderNumber?: T;
    fezOrderNumber?: T;
    user?: T;
    store?: T;
    items?:
        | T
        | {
              fezOrderNumber?: T;
              product?: T;
              quantity?: T;
              price?: T;
              id?: T;
          };
    shipping_cost?: T;
    subtotal?: T;
    total_amount?: T;
    status?: T;
    shipping_address?:
        | T
        | {
              street?: T;
              city?: T;
              state?: T;
              zip_code?: T;
              country?: T;
          };
    payment_info?:
        | T
        | {
              method?: T;
              payment_reference?: T;
          };
    escrow?: T;
    escrowStatus?: T;
    requiresAttention?: T;
    attentionReason?: T;
    notes?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "plans_select".
 */
export interface PlansSelect<T extends boolean = true> {
    name?: T;
    code?: T;
    description?: T;
    monthlyPrice?: T;
    setupFee?: T;
    trialDays?: T;
    features?:
        | T
        | {
              feature?: T;
              description?: T;
              included?: T;
              id?: T;
          };
    limits?:
        | T
        | {
              products?: T;
              stores?: T;
              storage?: T;
              staff?: T;
              monthlyTransactions?: T;
          };
    paystackPlan?: T;
    displayOrder?: T;
    active?: T;
    isDefaultPlan?: T;
    metadata?: T;
    createdAt?: T;
    updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products_select".
 */
export interface ProductsSelect<T extends boolean = true> {
    name?: T;
    slug?: T;
    description?: T;
    summary?: T;
    user?: T;
    store?: T;
    currency?: T;
    weight?: T;
    categories?:
        | T
        | {
              category?: T;
              id?: T;
          };
    store_categories?:
        | T
        | {
              store_category?: T;
              id?: T;
          };
    tags?:
        | T
        | {
              tag?: T;
              id?: T;
          };
    default_images?:
        | T
        | {
              image?: T;
              id?: T;
          };
    variations?:
        | T
        | {
              name?: T;
              sku?: T;
              price?: T;
              sale_price?: T;
              quantity?: T;
              attributes?:
                  | T
                  | {
                        name?: T;
                        value?: T;
                        id?: T;
                    };
              images?:
                  | T
                  | {
                        image?: T;
                        id?: T;
                    };
              low_stock_threshold?: T;
              is_visible?: T;
              id?: T;
          };
    base_price?: T;
    base_sale_price?: T;
    status?: T;
    best_seller?: T;
    is_featured?: T;
    activeFlashSale?: T;
    is_on_sale?: T;
    sale_start_date?: T;
    sale_end_date?: T;
    related_products?:
        | T
        | {
              product?: T;
              id?: T;
          };
    reviews?:
        | T
        | {
              user?: T;
              rating?: T;
              comment?: T;
              date?: T;
              verified_purchase?: T;
              id?: T;
          };
    average_rating?: T;
    rating_distribution?: T;
    seo?:
        | T
        | {
              title?: T;
              description?: T;
              keywords?: T;
          };
    createdAt?: T;
    updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "vendor-follows_select".
 */
export interface VendorFollowsSelect<T extends boolean = true> {
    follower?: T;
    vendor?: T;
    followedAt?: T;
    notifyOnNewProducts?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews_select".
 */
export interface ReviewsSelect<T extends boolean = true> {
    title?: T;
    content?: T;
    rating?: T;
    author?: T;
    entityType?: T;
    entity?: T;
    images?:
        | T
        | {
              image?: T;
              id?: T;
          };
    tags?:
        | T
        | {
              tag?: T;
              id?: T;
          };
    status?: T;
    rejectionReason?: T;
    vendorReply?:
        | T
        | {
              content?: T;
              repliedAt?: T;
              updatedAt?: T;
          };
    helpfulVotes?:
        | T
        | {
              user?: T;
              id?: T;
          };
    verified?: T;
    createdAt?: T;
    updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "store-categories_select".
 */
export interface StoreCategoriesSelect<T extends boolean = true> {
    name?: T;
    description?: T;
    store?: T;
    parent?: T;
    isPublished?: T;
    image?: T;
    slug?: T;
    order?: T;
    categories?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
    name?: T;
    slug?: T;
    description?: T;
    parent_id?: T;
    category_image?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subscription-history_select".
 */
export interface SubscriptionHistorySelect<T extends boolean = true> {
    vendor?: T;
    plan?: T;
    status?: T;
    transactionId?: T;
    amount?: T;
    currency?: T;
    billingPeriod?:
        | T
        | {
              startDate?: T;
              endDate?: T;
          };
    paymentMethod?:
        | T
        | {
              type?: T;
              lastFour?: T;
              brand?: T;
          };
    metadata?:
        | T
        | {
              invoiceNumber?: T;
              promoCode?: T;
              discountAmount?: T;
          };
    autoRenew?: T;
    cancellationDetails?:
        | T
        | {
              cancelledAt?: T;
              reason?: T;
              cancelledBy?: T;
          };
    createdAt?: T;
    updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "promotions_select".
 */
export interface PromotionsSelect<T extends boolean = true> {
    badge?: T;
    start_date?: T;
    end_date?: T;
    discount?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "heroes_select".
 */
export interface HeroesSelect<T extends boolean = true> {
    store?: T;
    promotion?: T;
    title?: T;
    buttonText?: T;
    subtitle?: T;
    description?: T;
    image?: T;
    start_date?: T;
    end_date?: T;
    priority?: T;
    theme?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "disputes_select".
 */
export interface DisputesSelect<T extends boolean = true> {
    escrow?: T;
    title?: T;
    description?: T;
    status?: T;
    product?: T;
    user?: T;
    'chat-message'?: T;
    order?: T;
    resolution?: T;
    resolution_date?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "carts_select".
 */
export interface CartsSelect<T extends boolean = true> {
    user?: T;
    items?:
        | T
        | {
              product?: T;
              store?: T;
              quantity?: T;
              price?: T;
              selected?: T;
              variation?:
                  | T
                  | {
                        id?: T;
                        name?: T;
                        attributes?:
                            | T
                            | {
                                  name?: T;
                                  value?: T;
                                  id?: T;
                              };
                    };
              id?: T;
          };
    totals?:
        | T
        | {
              subtotal?: T;
              tax?: T;
              shipping?: T;
              total?: T;
              itemCount?: T;
          };
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "account-settings_select".
 */
export interface AccountSettingsSelect<T extends boolean = true> {
    user?: T;
    notification_preferences?:
        | T
        | {
              email_notifications?: T;
              order_updates?: T;
              promotional_emails?: T;
          };
    privacy_settings?:
        | T
        | {
              profile_visibility?: T;
              show_order_history?: T;
          };
    preferences?:
        | T
        | {
              language?: T;
              currency?: T;
          };
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "return_policies_select".
 */
export interface ReturnPoliciesSelect<T extends boolean = true> {
    store?: T;
    name?: T;
    description?: T;
    days_to_return?: T;
    refund_type?: T;
    restocking_fee?: T;
    applicable_categories?:
        | T
        | {
              category?: T;
              id?: T;
          };
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "advertisements_select".
 */
export interface AdvertisementsSelect<T extends boolean = true> {
    store?: T;
    title?: T;
    description?: T;
    image?: T;
    targetUrl?: T;
    start_date?: T;
    end_date?: T;
    budget?: T;
    impressions?: T;
    clicks?: T;
    status?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recommendations_select".
 */
export interface RecommendationsSelect<T extends boolean = true> {
    recommendation_type?: T;
    target_user?: T;
    source_product?: T;
    target_category?: T;
    recommended_products?:
        | T
        | {
              product?: T;
              relevance_score?: T;
              recommendation_reason?: T;
              id?: T;
          };
    price_range?:
        | T
        | {
              min_price?: T;
              max_price?: T;
          };
    seasonal_info?:
        | T
        | {
              season?: T;
              start_date?: T;
              end_date?: T;
          };
    active?: T;
    priority?: T;
    conversion_rate?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "flash-sales_select".
 */
export interface FlashSalesSelect<T extends boolean = true> {
    name?: T;
    description?: T;
    store?: T;
    products?:
        | T
        | {
              product?: T;
              originalPrice?: T;
              salePrice?: T;
              discountPercentage?: T;
              quantity?: T;
              id?: T;
          };
    startDate?: T;
    endDate?: T;
    status?: T;
    restrictions?:
        | T
        | {
              newCustomersOnly?: T;
              userLimit?: T;
              totalLimit?: T;
          };
    analytics?:
        | T
        | {
              views?: T;
              sales?: T;
              revenue?: T;
              discountGiven?: T;
          };
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "escrow_select".
 */
export interface EscrowSelect<T extends boolean = true> {
    escrowId?: T;
    order?: T;
    customer?: T;
    vendor?: T;
    amount?: T;
    platformFee?: T;
    totalAmount?: T;
    status?: T;
    paymentReference?: T;
    dispute?: T;
    disputeDetails?:
        | T
        | {
              status?: T;
              reason?: T;
              resolution?: T;
              resolvedAt?: T;
          };
    expiresAt?: T;
    completedAt?: T;
    isLocked?: T;
    lockExpiresAt?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "order_trackings_select".
 */
export interface OrderTrackingsSelect<T extends boolean = true> {
    order?: T;
    status?: T;
    current_location?: T;
    tracking_history?:
        | T
        | {
              status?: T;
              location?: T;
              timestamp?: T;
              notes?: T;
              id?: T;
          };
    carrier_info?:
        | T
        | {
              name?: T;
              tracking_number?: T;
              tracking_url?: T;
          };
    estimated_delivery?: T;
    actual_delivery?: T;
    last_updated?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "black-friday-deals_select".
 */
export interface BlackFridayDealsSelect<T extends boolean = true> {
    name?: T;
    store?: T;
    status?: T;
    start_date?: T;
    end_date?: T;
    deal_products?:
        | T
        | {
              product?: T;
              discount_type?: T;
              discount_value?: T;
              quantity_limit?: T;
              id?: T;
          };
    description?: T;
    banner_image?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wallet-transactions_select".
 */
export interface WalletTransactionsSelect<T extends boolean = true> {
    transactionId?: T;
    wallet?: T;
    type?: T;
    amount?: T;
    fee?: T;
    netAmount?: T;
    currency?: T;
    status?: T;
    relatedEntities?:
        | T
        | {
              order?: T;
              transfer?: T;
          };
    paystackReference?: T;
    metadata?: T;
    createdAt?: T;
    updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter-subscriptions_select".
 */
export interface NewsletterSubscriptionsSelect<T extends boolean = true> {
    email?: T;
    name?: T;
    status?: T;
    preferences?: T;
    source?: T;
    lastEmailSent?: T;
    unsubscribedAt?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subscriptions_select".
 */
export interface SubscriptionsSelect<T extends boolean = true> {
    userId?: T;
    planId?: T;
    status?: T;
    interval?: T;
    currentPeriodStart?: T;
    currentPeriodEnd?: T;
    cancelAtPeriodEnd?: T;
    trialEndsAt?: T;
    canceledAt?: T;
    endedAt?: T;
    lastPaymentError?: T;
    flutterwave?:
        | T
        | {
              customerId?: T;
              subscriptionId?: T;
              paymentMethodId?: T;
          };
    billingDetails?:
        | T
        | {
              name?: T;
              email?: T;
              phone?: T;
              address?:
                  | T
                  | {
                        line1?: T;
                        line2?: T;
                        city?: T;
                        state?: T;
                        country?: T;
                        postalCode?: T;
                    };
              taxId?: T;
          };
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "saved-items_select".
 */
export interface SavedItemsSelect<T extends boolean = true> {
    user?: T;
    product?: T;
    savedAt?: T;
    notes?: T;
    notifyOnSale?: T;
    notifyOnRestock?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "transfers_select".
 */
export interface TransfersSelect<T extends boolean = true> {
    transferId?: T;
    wallet?: T;
    amount?: T;
    fee?: T;
    currency?: T;
    status?: T;
    recipientDetails?:
        | T
        | {
              recipientCode?: T;
              accountName?: T;
              accountNumber?: T;
              bankCode?: T;
          };
    paystackTransfer?:
        | T
        | {
              reference?: T;
              transferCode?: T;
              recipientCode?: T;
          };
    reason?: T;
    metadata?: T;
    createdAt?: T;
    updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "transactions_select".
 */
export interface TransactionsSelect<T extends boolean = true> {
    reference?: T;
    type?: T;
    amount?: T;
    status?: T;
    vendor?: T;
    order?: T;
    paystackReference?: T;
    metadata?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "waitlist_select".
 */
export interface WaitlistSelect<T extends boolean = true> {
    fullName?: T;
    email?: T;
    phoneNumber?: T;
    status?: T;
    source?: T;
    agreedToTerms?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "automations_select".
 */
export interface AutomationsSelect<T extends boolean = true> {
    name?: T;
    condition?: T;
    action?: T;
    status?: T;
    triggerType?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "conditions_select".
 */
export interface ConditionsSelect<T extends boolean = true> {
    name?: T;
    key?: T;
    parameterFields?:
        | T
        | {
              fieldName?: T;
              fieldType?: T;
              options?:
                  | T
                  | {
                        label?: T;
                        value?: T;
                        id?: T;
                    };
              id?: T;
          };
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "actions_select".
 */
export interface ActionsSelect<T extends boolean = true> {
    name?: T;
    key?: T;
    parameterFields?:
        | T
        | {
              fieldName?: T;
              fieldType?: T;
              options?:
                  | T
                  | {
                        label?: T;
                        value?: T;
                        id?: T;
                    };
              id?: T;
          };
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "measurements_select".
 */
export interface MeasurementsSelect<T extends boolean = true> {
    user?: T;
    height?: T;
    waist?: T;
    belly?: T;
    chest?: T;
    wrist?: T;
    neck?: T;
    arm_length?: T;
    thigh?: T;
    shoulder_width?: T;
    hips?: T;
    ankle?: T;
    lastUpdated?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "store-adverts_select".
 */
export interface StoreAdvertsSelect<T extends boolean = true> {
    store?: T;
    position?: T;
    image?: T;
    link?: T;
    active?: T;
    metrics?:
        | T
        | {
              views?: T;
              clicks?: T;
              lastViewed?: T;
          };
    createdAt?: T;
    updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "store-advert-metrics_select".
 */
export interface StoreAdvertMetricsSelect<T extends boolean = true> {
    advert?: T;
    views?: T;
    clicks?: T;
    lastViewed?: T;
    createdAt?: T;
    updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shared-measurements_select".
 */
export interface SharedMeasurementsSelect<T extends boolean = true> {
    user?: T;
    vendor?: T;
    measurements?: T;
    status?: T;
    createdAt?: T;
    updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "kyc_select".
 */
export interface KycSelect<T extends boolean = true> {
    user?: T;
    nin?: T;
    bank?: T;
    accountNumber?: T;
    accountName?: T;
    match?: T;
    verificationStatus?: T;
    verificationStep?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
    document?: T;
    globalSlug?: T;
    user?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
    user?: T;
    key?: T;
    value?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
    name?: T;
    batch?: T;
    updatedAt?: T;
    createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
    [k: string]: unknown;
}
